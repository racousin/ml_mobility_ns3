#include "trajectory_generator.h"
#include <iostream>
#include <iomanip>

int main() {
    try {
        std::cout << "=== {{ experiment_name }} Trajectory Generator ===" << std::endl;
        
        TrajectoryGenerator generator(
            "./traced_vae_model.pt",
            "./metadata.json",
            "./scalers.json"
        );

        // Generate trajectories for different transport modes
        std::vector<std::string> test_modes = {
            {% for mode in transport_modes %}"{{ mode }}"{% if not loop.last %},{% endif %}
            {% endfor %}
        };
        
        for (const auto& mode : test_modes) {
            std::cout << "\n--- Testing mode: " << mode << " ---" << std::endl;
            
            try {
                auto trajectories = generator.generate(mode, 50, 1);
                
                if (!trajectories.empty()) {
                    const auto& traj = trajectories[0];
                    std::cout << "Generated trajectory with " << traj.points.size() << " points" << std::endl;
                    std::cout << "Mode: " << traj.mode << ", Length: " << traj.length << std::endl;
                    
                    // Show first 5 points
                    std::cout << "First 5 points:" << std::endl;
                    for (size_t i = 0; i < 5 && i < traj.points.size(); ++i) {
                        std::cout << "  Point " << i << ": [";
                        std::cout << std::fixed << std::setprecision(6);
                        std::cout << "lat=" << traj.points[i][0];
                        std::cout << ", lon=" << traj.points[i][1];
                        std::cout << ", speed=" << traj.points[i][2];
                        std::cout << "]" << std::endl;
                    }
                    
                    // Show some statistics
                    if (!traj.points.empty()) {
                        double min_lat = traj.points[0][0], max_lat = traj.points[0][0];
                        double min_lon = traj.points[0][1], max_lon = traj.points[0][1];
                        double min_speed = traj.points[0][2], max_speed = traj.points[0][2];
                        double avg_speed = 0.0;
                        
                        for (const auto& point : traj.points) {
                            min_lat = std::min(min_lat, point[0]);
                            max_lat = std::max(max_lat, point[0]);
                            min_lon = std::min(min_lon, point[1]);
                            max_lon = std::max(max_lon, point[1]);
                            min_speed = std::min(min_speed, point[2]);
                            max_speed = std::max(max_speed, point[2]);
                            avg_speed += point[2];
                        }
                        avg_speed /= traj.points.size();
                        
                        std::cout << "Statistics:" << std::endl;
                        std::cout << "  Latitude range: [" << min_lat << ", " << max_lat << "]" << std::endl;
                        std::cout << "  Longitude range: [" << min_lon << ", " << max_lon << "]" << std::endl;
                        std::cout << "  Speed range: [" << min_speed << ", " << max_speed << "]" << std::endl;
                        std::cout << "  Average speed: " << avg_speed << std::endl;
                    }
                }
            } catch (const std::exception& e) {
                std::cerr << "Error generating trajectory for mode " << mode << ": " << e.what() << std::endl;
            }
        }
        
        std::cout << "\n=== Generation Complete ===" << std::endl;

    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}